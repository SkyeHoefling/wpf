<Project>
  <ItemGroup>
    <PackageReference Include="Microsoft.DotNet.ApiCompat" Version="$(MicrosoftDotNetApiCompatVersion)"/>
  </ItemGroup>

  <!-- Only enable API Compat when needed for some building assembly -->
  <PropertyGroup Condition="'$(RunNetFrameworkApiCompat)'==''">
    <RunNetFrameworkApiCompat>false</RunNetFrameworkApiCompat>
    <RunNetFrameworkApiCompat Condition="'$(Net48CompatNeededProjects)'!='' 
                                          and $(Net48CompatNeededProjects.Contains('$(MSBuildProjectName)'))">true</RunNetFrameworkApiCompat>
  </PropertyGroup>

  <PropertyGroup Condition="'$(RunReferenceApiCompat)'==''">
    <RunReferenceApiCompat>false</RunReferenceApiCompat>

    <RefBin>$(ArtifactsDir)bin\$(AssemblyName)\$(Configuration)\$(Platform)\$(AssemblyName).dll</RefBin>

    <!-- TODO:  Re-enable and fix matching. -->
    <!-- Since some of our ref/lib pairs can potentially be built internally, only run when the paired lib exists. -->
    <!--<RunReferenceApiCompat Condition="'$(ReferenceCompatNeededProjects)'!='' 
                                      and $(ReferenceCompatNeededProjects.Contains('$(MSBuildProjectName)'))
                                      and Exists('$(ArtifactsDir)bin\$(AssemblyName)\$(Configuration)\$(Platform)\$(AssemblyName).dll')">true</RunReferenceApiCompat>-->

  </PropertyGroup>

  <PropertyGroup>
    <RunApiCompat>false</RunApiCompat>
    <RunApiCompat Condition="'$(RunNetFrameworkApiCompat)'=='true' or '$(RunReferenceApiCompat)'=='true'">true</RunApiCompat>

    <RunApiCompatForSrc>false</RunApiCompatForSrc>
    <RunApiCompatForSrc Condition="'$(RunNetFrameworkApiCompat)'=='true'">true</RunApiCompatForSrc>

    <RunMatchingRefApiCompat>false</RunMatchingRefApiCompat>
    <RunMatchingRefApiCompat Condition="'$(RunReferenceApiCompat)'=='true'">true</RunMatchingRefApiCompat>
  </PropertyGroup>

  <PropertyGroup>
    <TaskFactory>RoslynCodeTaskFactory</TaskFactory>
    <TaskFactoryAssemblyFile>$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</TaskFactoryAssemblyFile>
  </PropertyGroup>

  <ItemGroup>
    <TaskFactoryReference Include="mscorlib" />
    <TaskFactoryReference Include="netstandard" />
  </ItemGroup>

  <!-- Find .NET Framework binary locations that are associated with the current assembly being produced. -->
  <UsingTask TaskName="FindDotNetFrameworkFilesTask"
             TaskFactory="$(TaskFactory)"
             AssemblyFile="$(TaskFactoryAssemblyFile)">
    <ParameterGroup>
      <FrameworkFileName ParameterType="System.String" Output="true" Required="true"/>
    </ParameterGroup>
    <Task>
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="fragment" Language="cs">
        <![CDATA[
          try
          {
            var net48RefPath = ToolLocationHelper.GetProgramFilesReferenceAssemblyRoot();
            
            if (string.IsNullOrEmpty(net48RefPath))
            {
              Log.LogError("Could not find .NET 4.8 Ref Directory");
              return false;
            }
            else
            {
              FrameworkFileName = Path.Combine(net48RefPath, ".NETFramework", "v4.8", FrameworkFileName);
              
              if (string.IsNullOrEmpty(FrameworkFileName))
              {
                 Log.LogError(string.Format("Could not find .NET 4.8 Ref Assembly for: {0}{1}", FrameworkFileName, Environment.NewLine));
                return false;
              }
            }
          }
          catch (Exception e)
          {
            Log.LogError(string.Format("Could not find .NET 4.8 Ref Assembly for: {0}{1}{2}", FrameworkFileName, Environment.NewLine, e.ToString()));
            return false;
          }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- This target sets up the matching contracts to run ApiCompat from .NET Core assemblies against the latest in .NET Framework -->
  <Target Name="ResolveNetFrameworkApiCompatContract"
          BeforeTargets="ValidateApiCompatForSrc"
          Condition="'$(RunNetFrameworkApiCompat)'=='true'">
    <FindDotNetFrameworkFilesTask FrameworkFileName="$(AssemblyName).dll">
      <Output TaskParameter="FrameworkFileName" PropertyName="ContractFileName" />
    </FindDotNetFrameworkFilesTask>

    <ItemGroup>
      <ResolvedMatchingContract Include="$(ContractFileName)" />
    </ItemGroup>
  </Target>

  <!--
    This target sets up the matching contracts to run ApiCompat from ref assemblies against the matching lib assembly.
  -->
  <Target Name="ResolveLibAssemblyForRefApiCompatContract"
          BeforeTargets="ValidateApiCompatForSrc"
          Condition="'$(RunMatchingRefApiCompat)'=='true'">
    <ItemGroup>
      <ResolvedMatchingContract Include="$(ArtifactsDir)bin\$(AssemblyName)\$(Configuration)\$(Platform)\$(AssemblyName).dll" />
    </ItemGroup>
  </Target>

</Project>
